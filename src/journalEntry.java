



import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JTable;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Set;
import javax.swing.WindowConstants;
 public class journalEntry extends javax.swing.JFrame {

    int z = 0;
    ButtonGroup bGroup1 = new ButtonGroup();
    AccountTitle[] account_title;
    int transacNo = 1;
    int editableTransacNo = -1;
    private boolean hasUnbalancedInTable = false;
    private int projectId;
    private int start_month;
    private int start_year;
    private boolean isLoad;
    private boolean isProjectSaved = false;
    
    home hm;
    Ledger ld;
    private ShowInitialDetails SI;
    JEAndAdjusmentSC JEA;
    public journalEntry(home hm, Ledger ld) {
        
        initComponents();
        this.hm = hm;
        this.ld = ld;
        JEA = new JEAndAdjusmentSC();
        bGroup1.add(jRadioButton1);
        bGroup1.add(jRadioButton2);

        JEA.jComboBoxEditor(textField1, jComboBox1);
        
        jButton2.setVisible(false);
        jButton3.setVisible(false);
        jButton4.setVisible(false);
        jButton5.setVisible(false);
        
        jLabel1.setVisible(false);
        jLabel2.setVisible(false);
        jLabel3.setVisible(false);
        jLabel4.setVisible(false);
        jLabel5.setVisible(false);
        
        jLabel10.setVisible(false);
        jLabel11.setVisible(false);
        
        jLabel13.setVisible(false);
        
        tem1.setVisible(false);
       // tem2.setVisible(false);
        tem3.setVisible(false);
  
        System.out.println("Width: "+jTable1.getWidth()+"\nHeight "+jTable1.getHeight());
        
        
        account_title = AccountTitle.ACCOUNT_TITLE;
        JEA.feedComboBox(account_title, jComboBox1);
       
        
    }
    public void setProjectId(int projectId, boolean isLoad) {
        this.projectId = projectId;
        this.isLoad = isLoad;
        
     
        hm.setDoLoad(isLoad);
        
        if(isLoad) {
            loadJournalEntries(projectId);
            this.toFront();
            this.requestFocus();
        }
        SI  = new ShowInitialDetails(projectId);
    }
    public int getProjectId() {
        return projectId;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        label1 = new java.awt.Label();
        textField1 = new java.awt.TextField();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jSeparator2 = new javax.swing.JSeparator();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        tem1 = new javax.swing.JButton();
        tem2 = new javax.swing.JLabel();
        tem3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1366, 781));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(null);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/control hide and show.png"))); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton1MouseExited(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(60, 30, 66, 67);
        this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                handleExitLogoutHome(0);//treat as exit button
            }
        });
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            cleanupUnsavedProject(projectId);
        }));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/home_icon.png"))); // NOI18N
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton2MouseExited(evt);
            }
        });
        jButton2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jButton2ComponentShown(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(150, 30, 66, 67);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view_output_icon.png"))); // NOI18N
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton3MouseExited(evt);
            }
        });
        jButton3.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jButton3ComponentShown(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(230, 30, 66, 67);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logout.png"))); // NOI18N
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton4MouseExited(evt);
            }
        });
        jButton4.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jButton4ComponentShown(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(310, 30, 66, 67);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exit button.png"))); // NOI18N
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton5MouseExited(evt);
            }
        });
        jButton5.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jButton5ComponentShown(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(390, 30, 66, 67);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Home");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(150, 120, 66, 20);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Show/Hide");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(60, 120, 81, 20);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Ouput");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(230, 120, 66, 20);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Logout");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(310, 120, 66, 20);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Close");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(390, 120, 66, 20);

        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Date", "Account Title", "Account No.", "Debit", "Credit"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                int transacNoCol = 2;
                Object value = getValueAt(rowIndex, transacNoCol);
                return value != null && (int) value == editableTransacNo;
            }

        });
        jTable1.setToolTipText("");
        jTable1.setRowHeight(25);
        jTable1.setRowSelectionAllowed(false);
        jTable1.setShowGrid(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(100); // Date
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(400); // Account Title
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(80);  // Account Number
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(189); // Debit
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(190); // Credit

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(350, 150, 980, 590);

        jSeparator1.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(50, 137, 1280, 3);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("GENERAL JOURNAL ENTRY");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(60, 240, 260, 20);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Account Title:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(60, 361, 120, 17);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Date (MM/DD/YY)");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(60, 300, 160, 17);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Account Type:");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(60, 421, 103, 17);

        label1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        label1.setText("Ammount:");
        getContentPane().add(label1);
        label1.setBounds(60, 481, 80, 21);

        textField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        textField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField1ActionPerformed(evt);
            }
        });
        getContentPane().add(textField1);
        textField1.setBounds(60, 501, 250, 20);

        jDateChooser1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(jDateChooser1);
        jDateChooser1.setBounds(60, 320, 250, 23);
        Calendar clndr = Calendar.getInstance();
        clndr.set(Calendar.YEAR, start_year);
        clndr.set(Calendar.MONTH, start_month);

        jDateChooser1.setCalendar(clndr);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(60, 521, 250, 3);

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        jButton6.setText("Add");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(30, 540, 82, 27);

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reset_icon.png"))); // NOI18N
        jButton7.setText("Reset");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7);
        jButton7.setBounds(220, 540, 100, 30);

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>());
        jComboBox1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                jComboBox1PopupMenuCanceled(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBox1PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBox1PopupMenuWillBecomeVisible(evt);
            }
        });
        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBox1KeyReleased(evt);
            }
        });
        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(60, 381, 250, 23);

        jRadioButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jRadioButton1.setText("Debit");
        getContentPane().add(jRadioButton1);
        jRadioButton1.setBounds(60, 441, 61, 22);

        jRadioButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jRadioButton2.setText("Credit");
        getContentPane().add(jRadioButton2);
        jRadioButton2.setBounds(170, 441, 66, 22);

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edit_icon.png"))); // NOI18N
        jButton8.setText("Edit");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8);
        jButton8.setBounds(120, 540, 90, 27);

        jButton9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save_icon.png"))); // NOI18N
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton9MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton9MouseExited(evt);
            }
        });
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton9);
        jButton9.setBounds(60, 580, 50, 27);

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/up_icon.png"))); // NOI18N
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton10MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton10MouseExited(evt);
            }
        });
        getContentPane().add(jButton10);
        jButton10.setBounds(150, 580, 50, 27);

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete_icon.png"))); // NOI18N
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton11MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton11MouseExited(evt);
            }
        });
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton11);
        jButton11.setBounds(250, 580, 50, 27);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Save");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(60, 610, 50, 17);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Save as");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(140, 610, 70, 17);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Delete");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(250, 610, 50, 17);

        tem1.setText("jButton13");
        tem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tem1ActionPerformed(evt);
            }
        });
        getContentPane().add(tem1);
        tem1.setBounds(270, 150, 40, 40);

        tem2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        tem2.setText("?");
        tem2.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        tem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tem2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tem2MouseExited(evt);
            }
        });
        getContentPane().add(tem2);
        tem2.setBounds(320, 150, 30, 40);

        tem3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tem3.setText("Edit initial details");
        getContentPane().add(tem3);
        tem3.setBounds(220, 200, 140, 17);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
   
    public void justToPassStartMonthYear(int month, int year) {
         this.start_month = month;
         this.start_year = year;
         
         System.out.println("After passing to method numMnth: "+month);
         System.out.println("After passing to method numMnth: "+month);
         
         System.out.println("global start_month: "+this.start_month);
         System.out.println("global start_year: "+this.start_year);
    }

    private void cleanupUnsavedProject(int projectId) {
        if (!isProjectSaved && projectId > 0) {
            try (Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/accountingcycle", "root", "123456789")) {

                // Check if project still exists
                String checkSql = "SELECT COUNT(*) FROM projects WHERE project_id = ?";
                try (PreparedStatement checkPs = conn.prepareStatement(checkSql)) {
                    checkPs.setInt(1, projectId);
                    ResultSet rs = checkPs.executeQuery();
                    rs.next();
                    if (rs.getInt(1) == 0) return; // Already deleted
                }

                // Delete initial details
                String deleteInitialSql = "DELETE FROM initialdetails WHERE project_id IN (SELECT project_id FROM projects WHERE is_saved = FALSE)";
                try (PreparedStatement ps = conn.prepareStatement(deleteInitialSql)) {
                    ps.executeUpdate();
                }

                // Delete project
                String deleteProjectSql = "DELETE FROM projects WHERE is_saved = FALSE";
                try (PreparedStatement ps = conn.prepareStatement(deleteProjectSql)) {
                    ps.executeUpdate();
                }
                String updateAutoIncrementSql = "ALTER TABLE projects AUTO_INCREMENT = "+(projectId);
                try (PreparedStatement ps = conn.prepareStatement(updateAutoIncrementSql)) {
                    ps.execute();
                }
                System.out.println("Unsaved project " + projectId + " deleted.");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this,
                        "Error deleting unsaved project: " + e.getMessage(),
                        "Database Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private boolean confirmAction(String message) {
        int result = JOptionPane.showConfirmDialog(null, message, "Select", JOptionPane.YES_NO_OPTION);
        return result == JOptionPane.YES_OPTION;
    }
    private boolean isProjectSaved(int projectId) {
        String query = "SELECT is_saved FROM projects WHERE project_id = ?";
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/accountingcycle", "root", "123456789"); 
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setInt(1, projectId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getBoolean("is_saved");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Or log it properly
        }
        return false; // Default to false if query fails or no record found
    }  
    private void handleExitLogoutHome(int whoCalled) {
        

        Object[] options = {"Save before Exit", "Exit without Saving", "Cancel"};
        int choice = JOptionPane.showOptionDialog(
            null,
            "Do you want to save your work before exiting?",
            "Confirm Exit",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.WARNING_MESSAGE,
            null,
            options,
            options[1]
        );
        if(choice == 0 && whoCalled == 0) {//exit button called
            if (isProjectSaved(projectId)) {
                return; // Project already saved, no action needed
            }
            boolean successful = askToSave();
            if(!successful) {
                return;
            }
            if(confirmAction("Do you really want to close the program?")) {
                System.exit(0);
            }
        } else if(choice == 1 && whoCalled == 0){//exit button called
            if(confirmAction("Do you really want to close the program?")) {
                cleanupUnsavedProject(projectId);
                System.exit(0);
            }
           
        } else if(choice ==  0 && whoCalled == 1) {//logout button called
            boolean successful = askToSave();
            if(!successful) {
                return;
            }
            if(confirmAction("Do you really want to logout?")) {
               setVisible(false);
               new login().setVisible(true);
            }
        } else if(choice == 1 &&  whoCalled == 1) {//logout button called
            if(confirmAction("Do you really want to logout?")) {
               cleanupUnsavedProject(projectId);
               setVisible(false);
               new login().setVisible(true);
            }
        } else if(choice == 0 && whoCalled == 2) {//home button called
            boolean successful = askToSave();
            if(!successful) {
                return;
            }
            setVisible(false);
            hm.setVisible(true);
        } else if(choice == 1 && whoCalled ==  2) {//home button called
            cleanupUnsavedProject(projectId);
            setVisible(false);
            hm.setVisible(true);
        } else if(choice == 1 && whoCalled ==  3) {//home button called
            cleanupUnsavedProject(projectId);
            setVisible(false);
            new journalEntryOutput().setVisible(true);
        }
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        hm.setProjectKey(projectId);
        if(isProjectSaved(projectId) && confirmAction("Do you really want to close the program?")) {
            System.exit(0);
            return;
        }
        handleExitLogoutHome(0); //0 for exit
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        hm.setProjectKey(projectId);
        if(isProjectSaved(projectId) && confirmAction("Do you really want to logout?")) {
            setVisible(false);
            new login().setVisible(true);
            return;
        }
        handleExitLogoutHome(1);//1 for logout
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        hm.setProjectKey(projectId);
       
        handleExitLogoutHome(3);//for output
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        
        if(isProjectSaved(projectId)) {
            setVisible(false);
            hm.setVisible(true);
            hm.setProjectKey(projectId);
            return;
        } 
        handleExitLogoutHome(2);//for home
        
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        if(z == 0) 
        {
            try{
                Thread.sleep(10);
                jButton2.setVisible(true);
            }catch(Exception e) {
            
            }
        } else {
            jButton2.setVisible(false);
            jButton3.setVisible(false);
            jButton4.setVisible(false);
            jButton5.setVisible(false);

            z = 0;
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jButton2ComponentShown
        // TODO add your handling code here:
        try{
                Thread.sleep(10);
                jButton3.setVisible(true);
            }catch(Exception e) {
            
            }
    }//GEN-LAST:event_jButton2ComponentShown

    private void jButton3ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jButton3ComponentShown
        // TODO add your handling code here:
        try{
                Thread.sleep(10);
                jButton4.setVisible(true);
            }catch(Exception e) {
            
            }
    }//GEN-LAST:event_jButton3ComponentShown

    private void jButton4ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jButton4ComponentShown
        // TODO add your handling code here:
        try{
                Thread.sleep(10);
                jButton5.setVisible(true);
            }catch(Exception e) {
            
            }
    }//GEN-LAST:event_jButton4ComponentShown

    private void jButton5ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jButton5ComponentShown
        // TODO add your handling code here:
        z = 1;
    }//GEN-LAST:event_jButton5ComponentShown

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        // TODO add your handling code here:
        jLabel1.setVisible(true);
    }//GEN-LAST:event_jButton1MouseEntered

    private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
        // TODO add your handling code here:
        jLabel1.setVisible(false);
    }//GEN-LAST:event_jButton1MouseExited

    private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered
        // TODO add your handling code here:
        jLabel2.setVisible(true);
    }//GEN-LAST:event_jButton2MouseEntered

    private void jButton2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseExited
        // TODO add your handling code here:
        jLabel2.setVisible(false);
    }//GEN-LAST:event_jButton2MouseExited

    private void jButton3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseExited
        // TODO add your handling code here:
        jLabel3.setVisible(false);
    }//GEN-LAST:event_jButton3MouseExited

    private void jButton3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseEntered
        // TODO add your handling code here:
        jLabel3.setVisible(true);
    }//GEN-LAST:event_jButton3MouseEntered

    private void jButton4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseEntered
        // TODO add your handling code here:
        jLabel4.setVisible(true);
    }//GEN-LAST:event_jButton4MouseEntered

    private void jButton4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseExited
        // TODO add your handling code here:
        jLabel4.setVisible(false);
    }//GEN-LAST:event_jButton4MouseExited

    private void jButton5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseEntered
        // TODO add your handling code here:
        jLabel5.setVisible(true);
    }//GEN-LAST:event_jButton5MouseEntered

    private void jButton5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseExited
        // TODO add your handling code here:
        jLabel5.setVisible(false);
    }//GEN-LAST:event_jButton5MouseExited

    private void textField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textField1ActionPerformed

    private void displayUpdateToTable(Date date, String accTitle, int transNo, Transaction debit, Transaction credit, int selectedRow) throws CancelException {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        String formatted;
        String ownerCapital = "";
        SimpleDateFormat dF = new SimpleDateFormat("MM/dd/yyyy");
        String dateFormatted = dF.format(date);
        int currentTransacNo = transNo;
        if(credit.getAmount().compareTo(BigDecimal.ZERO) == 0) {//DEBIT
            formatted =  String.format("₱%,.2f", debit.getAmount());
            if(accTitle.equals("Capital")) {
                ownerCapital = JOptionPane.showInputDialog(null, "Please input whose capital this belong to: ", "Owner of capital", JOptionPane.QUESTION_MESSAGE);
                if(ownerCapital == null) throw new CancelException(); if(ownerCapital.isBlank()) throw new IllegalArgumentException("Must put an owner  name");
                model.setValueAt(dateFormatted, selectedRow, 0);
                model.setValueAt(ownerCapital+", "+accTitle, selectedRow, 1);
                model.setValueAt(currentTransacNo, selectedRow, 2);
                model.setValueAt(formatted, selectedRow, 3);
                model.setValueAt("", selectedRow, 4);
            } else {
                model.setValueAt(dateFormatted, selectedRow, 0);
                model.setValueAt(accTitle, selectedRow, 1);
                model.setValueAt(currentTransacNo, selectedRow, 2);
                model.setValueAt(formatted, selectedRow, 3);
                model.setValueAt("", selectedRow, 4);
            }
            
            
        }
        else if(debit.getAmount().compareTo(BigDecimal.ZERO) == 0) {//credit
            formatted =  String.format("₱%,.2f", credit.getAmount());
            if(accTitle.equals("Capital")) {
                ownerCapital = JOptionPane.showInputDialog(null, "Please input whose capital this belong to: ", "Owner of capital", JOptionPane.QUESTION_MESSAGE);
                if(ownerCapital == null) throw new CancelException(); if(ownerCapital.isBlank()) throw new IllegalArgumentException("Must put an owner  name");
                model.setValueAt(dateFormatted, selectedRow, 0);
                model.setValueAt("     "+ownerCapital + ", "+ accTitle, selectedRow, 1);
                model.setValueAt(currentTransacNo, selectedRow, 2);
                model.setValueAt("", selectedRow, 3);
                model.setValueAt(formatted, selectedRow, 4);
            } else {
                model.setValueAt(dateFormatted, selectedRow, 0);
                model.setValueAt("     "+accTitle, selectedRow, 1);
                model.setValueAt(currentTransacNo, selectedRow, 2);
                model.setValueAt("", selectedRow, 3);
                model.setValueAt(formatted, selectedRow, 4); 
            }
        }
    }
    private void displayToTable(Date date, String accTitle, int transNo, Transaction debit, Transaction credit) throws CancelException {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        String formatted;
        String ownerCapital = "";
        SimpleDateFormat dF = new SimpleDateFormat("MM/dd/yyyy");
        String dateFormatted = dF.format(date);
        if(credit.getAmount().compareTo(BigDecimal.ZERO) == 0) {//DEBIT
            
            formatted =  String.format("₱%,.2f", debit.getAmount());
            if(accTitle.equals("Capital")) {
               ownerCapital = JOptionPane.showInputDialog(null, "Please input whose capital this belong to: ", "Owner of capital", JOptionPane.QUESTION_MESSAGE);
               if(ownerCapital == null) throw new CancelException(); if(ownerCapital.isBlank()) throw new IllegalArgumentException("Must put an owner  name");
               model.addRow(new Object[] {dateFormatted, ownerCapital+", "+accTitle, transNo, formatted, ""});
            } else {
                model.addRow(new Object[] {dateFormatted, accTitle, transNo, formatted, ""});
            }
        }
        else if(debit.getAmount().compareTo(BigDecimal.ZERO) == 0) {//credit
            formatted =  String.format("₱%,.2f", credit.getAmount());
            if(accTitle.equals("Capital")) {
                ownerCapital = JOptionPane.showInputDialog(null, "Please input whose capital this belong to: ", "Owner of capital", JOptionPane.QUESTION_MESSAGE);
                if(ownerCapital == null) throw new CancelException(); if(ownerCapital.isBlank()) throw new IllegalArgumentException("Must put an owner  name");
                model.addRow(new Object[] {dateFormatted, "     "+ownerCapital+", "+accTitle, transNo, "", formatted}); 
            } else {
                model.addRow(new Object[] {dateFormatted, "     "+accTitle, transNo, "", formatted}); 
            }
        }
    }
    private int nextTransacNoFromTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int max = 0;
        for (int r = 0; r < model.getRowCount(); r++) {
            try {
                int n = Integer.parseInt(model.getValueAt(r, 2).toString());
                if (n > max) max = n;
            } catch (Exception ex) { /* ignore malformed */ }
        }
        return max + 1;
    }

    private void clearSelectionAndForm() {
        jTable1.clearSelection();
        jDateChooser1.setDate(null);
        jComboBox1.setSelectedIndex(-1);
        bGroup1.clearSelection();
        textField1.setText("");
    }
    private boolean hasDebitInTable(int transacNo) {
    
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for(int x = 0; x < model.getRowCount(); x++) {
            int transNo = Integer.parseInt(model.getValueAt(x, 2).toString());
            if(transNo == transacNo && JEA.parseCellToDouble(model.getValueAt(x, 3)).compareTo(BigDecimal.ZERO) > 0) {
                return true;
            }
        }
        return false;
    }
    boolean hasCredit = false;
    
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        
        boolean found = false;
        String account;
        Date date;
        BigDecimal amount;
        String type = "error not correct type";
        
        try {
            account = (String) jComboBox1.getSelectedItem();    
            account = account.trim();
            
            for(AccountTitle acc : account_title) {
                if(account.equals(acc.getTitle()) ){
                    type = acc.getType();
                    found = true;
                    break;
                }      
            } 
            if (bGroup1.getSelection() == null && jDateChooser1.getDate() == null &&
                (jComboBox1.getSelectedItem() == null || ((String) jComboBox1.getSelectedItem()).isBlank() || found == false) &&
                textField1.getText().isBlank()) {
                throw new IllegalArgumentException("Must fill all forms");
            }
            date = jDateChooser1.getDate();
            if(date == null) 
                throw new IllegalArgumentException("Please select a date!");
            if(!found || account.isBlank())
                throw new IllegalArgumentException("Please enter a valid account title");
            if(bGroup1.getSelection() == null) {
                throw new IllegalArgumentException("Please choose Debit/Credit");
            }
            
            amount = new BigDecimal(textField1.getText());
            if(amount.compareTo(BigDecimal.ZERO) <=0) {
                throw new IllegalArgumentException("Please enter a valid amount");
            }
            
            int targetTransacNo = transacNo;
            int selectedRow = jTable1.getSelectedRow();
            if(selectedRow >= 0) {
                int rowTransNo = Integer.parseInt(jTable1.getValueAt(selectedRow, 2).toString());
                if(JEA.sumDebitTotal(rowTransNo, jTable1).compareTo(JEA.sumCreditTotal(rowTransNo, jTable1)) != 0) {
                    targetTransacNo = rowTransNo;
                } else {
                    jTable1.clearSelection();
                }
            }
            
            if(!hasDebitInTable(targetTransacNo) && !jRadioButton1.isSelected()) {
                throw new IllegalArgumentException("First entry must be bebit");
            }
            
            //DEBUG
            BigDecimal preDebitTotal = JEA.sumDebitTotal(targetTransacNo, jTable1);
            BigDecimal preCreditTotal = JEA.sumCreditTotal(targetTransacNo, jTable1);
            BigDecimal newDebitTotal = jRadioButton1.isSelected() ? preDebitTotal.add(amount) : preDebitTotal;
            BigDecimal newCreditTotal = jRadioButton2.isSelected() ? preCreditTotal.add(amount) : preCreditTotal;
            
            if(newCreditTotal.compareTo(newDebitTotal) > 0) {
                
                throw new IllegalArgumentException("Total credit must no exceed total debit");
            }
            
            
            int a = JOptionPane.showConfirmDialog(null, "Do you really want to add these details?","Selection",JOptionPane.YES_NO_OPTION);
            if(a != JOptionPane.YES_OPTION) return;
            
            Transaction debit = new Transaction();
            Transaction credit = new Transaction();
            AccountTitle fullAccount = new AccountTitle();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
           
            if(jRadioButton1.isSelected()) {
                debit = new Transaction(amount, targetTransacNo);
                credit = new Transaction(BigDecimal.ZERO, targetTransacNo);
                fullAccount = new AccountTitle(account, targetTransacNo, debit, credit, date, type);
                displayToTable(date, account, targetTransacNo, debit, credit);
                amount = BigDecimal.ZERO;
               
            } else if(jRadioButton2.isSelected()) {
                credit = new Transaction(amount, targetTransacNo);
                debit = new Transaction(BigDecimal.ZERO, targetTransacNo);
                fullAccount = new AccountTitle(account, targetTransacNo, debit, credit, date, type);
                displayToTable(date, account, targetTransacNo, debit, credit);
                hasCredit = true;
                amount = BigDecimal.ZERO;
            
            }
            
            BigDecimal finalDebitTotal = JEA.sumDebitTotal(targetTransacNo, jTable1);
            BigDecimal finalCreditTotal = JEA.sumCreditTotal(targetTransacNo, jTable1);
            
            if(finalCreditTotal.compareTo(finalDebitTotal) > 0) {
                
                for (int x = model.getRowCount()-1; x >= 0; x--) {
                    int rowTransNo = Integer.parseInt(model.getValueAt(x, 2).toString());
                    BigDecimal rowDebit = JEA.parseCellToDouble(model.getValueAt(x, 3));
                    BigDecimal rowCredit = JEA.parseCellToDouble(model.getValueAt(x, 4));

                    boolean match = (rowTransNo == targetTransacNo) && 
                                ((jRadioButton1.isSelected() && rowDebit.compareTo(amount) == 0) ||
                                    (jRadioButton2.isSelected() && rowCredit.compareTo(amount) == 0));

                    if (match) {
                        model.removeRow(x);
                        break;
                    }
                }
                clearSelectionAndForm();
                throw new IllegalArgumentException("Cannot add more credit amount, debit and credit is already balanced!");
             
            }
            
            System.out.println("DEBUG: after insert totls transNo" + targetTransacNo);
            System.out.println("DEBUG: final debit total: " + finalDebitTotal);
            System.out.println("DEBUG: final credit total: " + finalCreditTotal);
            
       
            
            if(finalDebitTotal.compareTo(finalCreditTotal) == 0 && finalDebitTotal.compareTo(BigDecimal.ZERO) > 0) {
                
                System.out.println("the condition to increment transacNo is called");
                System.out.println("Incrementing transacNo from: "+ transacNo);
                transacNo =nextTransacNoFromTable();
                System.out.println("after incrementing transacNo: "+transacNo);
                hasCredit = false;
                
                clearSelectionAndForm();
            }
            JOptionPane.showMessageDialog(null, "Details added!", "Successful", JOptionPane.INFORMATION_MESSAGE);
            System.out.println("Total Debit "+finalDebitTotal+"\nTotal Credit: "+finalCreditTotal);
//            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Amount must be a number!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (CancelException e) {
//           do nothing
            return;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Unexpected error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } 
        found = false;
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jComboBox1PopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox1PopupMenuCanceled
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1PopupMenuCanceled

    private void jComboBox1PopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox1PopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        textField1.repaint();
    }//GEN-LAST:event_jComboBox1PopupMenuWillBecomeInvisible

    private void jComboBox1PopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBox1PopupMenuWillBecomeVisible
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1PopupMenuWillBecomeVisible

    private void jComboBox1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            textField1.repaint();
       
    }//GEN-LAST:event_jComboBox1KeyPressed

    private void jComboBox1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1KeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            textField1.repaint();
    }//GEN-LAST:event_jComboBox1KeyReleased

    private void jButton9MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseEntered
        // TODO add your handling code here:
        jLabel10.setVisible(true);
    }//GEN-LAST:event_jButton9MouseEntered

    private void jButton9MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseExited
        // TODO add your handling code here:
        jLabel10.setVisible(false);
    }//GEN-LAST:event_jButton9MouseExited

    private void jButton10MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseEntered
        // TODO add your handling code here:
        jLabel11.setVisible(true);
    }//GEN-LAST:event_jButton10MouseEntered

    private void jButton10MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseExited
        // TODO add your handling code here:
        jLabel11.setVisible(false);
    }//GEN-LAST:event_jButton10MouseExited

    private void jButton11MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MouseEntered
        // TODO add your handling code here:
        jLabel13.setVisible(true);
    }//GEN-LAST:event_jButton11MouseEntered

    private void jButton11MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MouseExited
        // TODO add your handling code here:
        jLabel13.setVisible(false);
    }//GEN-LAST:event_jButton11MouseExited

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel tb1Model = (DefaultTableModel) jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();
        
        String dateStr = tb1Model.getValueAt(selectedRow, 0).toString();
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
        try {
            Date dateValue = sdf.parse(dateStr);
            jDateChooser1.setDate(dateValue);
        } catch (ParseException ex) {
            Logger.getLogger(journalEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String rawAccountTitle = tb1Model.getValueAt(jTable1.getSelectedRow(), 1).toString().trim();
        
        if(rawAccountTitle.contains(",")) {
            String[] parts = rawAccountTitle.split(",", 2);
            rawAccountTitle = parts[1].trim();
            
        } else {
            rawAccountTitle = rawAccountTitle.trim();
        }
        jComboBox1.setSelectedItem(rawAccountTitle);
        
        BigDecimal debitAmount = JEA.parseCellToDouble(tb1Model.getValueAt(selectedRow, 3));
        BigDecimal creditAmount = JEA.parseCellToDouble(tb1Model.getValueAt(selectedRow, 4));
          
        if(debitAmount.compareTo(BigDecimal.ZERO) > 0) {
            jRadioButton1.setSelected(true);
            textField1.setText(String.valueOf(debitAmount));     
        } else if (creditAmount.compareTo(BigDecimal.ZERO) > 0) {
            jRadioButton2.setSelected(true);
            textField1.setText(String.valueOf(creditAmount));       
        } else {
            textField1.setText("");
        }    
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        
        //String editableRows = JOptionPane.showInputDialog(null, "Input transaction number to edit:", "Input", JOptionPane.QUESTION_MESSAGE);
        try {
            int selectedRow = jTable1.getSelectedRow();
            if (selectedRow == -1) {
                throw new IllegalArgumentException("Please select a row to update!");
            }

            boolean found = false;
            String account = (String) jComboBox1.getSelectedItem();
            account = account.trim();
            Date date = jDateChooser1.getDate();
            BigDecimal amount;
            String type = "error not correct type";
            DefaultTableModel tb1Model = (DefaultTableModel) jTable1.getModel();
            int existingTransacNo = Integer.parseInt(tb1Model.getValueAt(selectedRow, 2).toString());
            AccountTitle fullAcount = new AccountTitle();

            // validate account
            for (AccountTitle acc : account_title) {
                if (account.equals(acc.getTitle())) {
                    type = acc.getType();
                    found = true;
                    break;
                }
            }

            if (date == null) throw new IllegalArgumentException("Please select a date!");
            if (!found || account.isBlank()) throw new IllegalArgumentException("Please enter an account title");
            if (bGroup1.getSelection() == null) throw new IllegalArgumentException("Please choose Debit/Credit");

            // amount
            amount = new BigDecimal(textField1.getText());
            if (amount.compareTo(BigDecimal.ZERO) == 0) throw new IllegalArgumentException("Please enter a valid amount");
            
            BigDecimal currentDebitTotal = JEA.sumDebitTotal(existingTransacNo, jTable1);
            BigDecimal currentCreditTotal = JEA.sumCreditTotal(existingTransacNo, jTable1);
            
            BigDecimal oldDebit = JEA.parseCellToDouble(tb1Model.getValueAt(selectedRow, 3));
            BigDecimal oldCredit = JEA.parseCellToDouble(tb1Model.getValueAt(selectedRow, 4));
            
            BigDecimal adjustedDebitTotal = currentDebitTotal.subtract(oldDebit);
            BigDecimal adjustedCreditTotal = currentCreditTotal.subtract(oldCredit);
            
            // confirm update
            if(jRadioButton1.isSelected()) {
                adjustedDebitTotal = adjustedDebitTotal.add(amount);
            } else{
                adjustedCreditTotal = adjustedCreditTotal.add(amount);
            }
            
            if(adjustedCreditTotal.compareTo(adjustedDebitTotal) > 0) {
                throw new IllegalArgumentException("Total credit must not exceed total debit!");
            }
            int a = JOptionPane.showConfirmDialog(null, "Do you really want to update this row?", "Confirm", JOptionPane.YES_NO_OPTION);

            if (a != JOptionPane.YES_OPTION) return;
            
            Transaction debit;
            Transaction credit;

            if (jRadioButton1.isSelected()) { // Debit
                debit = new Transaction(amount, existingTransacNo);
                credit = new Transaction(BigDecimal.ZERO, existingTransacNo);
                fullAcount = new AccountTitle(account, existingTransacNo, debit, credit, date, type);
                displayUpdateToTable(date, account, existingTransacNo, debit, credit, jTable1.getSelectedRow());
            } else if (jRadioButton2.isSelected()) { // Credit
                credit = new Transaction(amount, existingTransacNo);
                debit = new Transaction(BigDecimal.ZERO, existingTransacNo);
                fullAcount = new AccountTitle(account, existingTransacNo, debit, credit, date, type);
                displayUpdateToTable(date, account, existingTransacNo, debit, credit, jTable1.getSelectedRow());
            }

            // update row in table directly

            clearSelectionAndForm();
            JOptionPane.showMessageDialog(null, "Row updated successfully!", "Updated", JOptionPane.INFORMATION_MESSAGE);


        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Amount must be a number!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (CancelException e) {
            return;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Unexpected error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        
        clearSelectionAndForm();
        
    }//GEN-LAST:event_jButton7ActionPerformed
    
    
    private boolean checkAndHighlightUnbalancedAccounts() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Map<Integer, BigDecimal> debitSum = new HashMap<>();
        Map<Integer, BigDecimal> creditSum = new HashMap<>();
        
        hasUnbalancedInTable = false;
        
        for(int row = 0; row < model.getRowCount(); row++) {
            Object tObj = model.getValueAt(row, 2);
            if (tObj == null) continue;
            int transNo;
            try {
                transNo = Integer.parseInt(tObj.toString());
            } catch (Exception ex) {
                continue;
            }
            
            BigDecimal debit = JEA.parseCellToDouble(model.getValueAt(row, 3));
            BigDecimal credit = JEA.parseCellToDouble(model.getValueAt(row, 4));
            
            debitSum.put(transNo, debitSum.getOrDefault(transNo, BigDecimal.ZERO).add(debit));
            creditSum.put(transNo, creditSum.getOrDefault(transNo, BigDecimal.ZERO).add(credit));
        }
        Set<Integer> allTransNos = new HashSet<>();
        allTransNos.addAll(debitSum.keySet());
        allTransNos.addAll(creditSum.keySet());

        for (Integer transNo : allTransNos) {
            BigDecimal d = debitSum.getOrDefault(transNo, BigDecimal.ZERO);
            BigDecimal c = creditSum.getOrDefault(transNo, BigDecimal.ZERO);
            if (d.compareTo(c) != 0) {
                hasUnbalancedInTable = true;
                break;
            }
        }
        
        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFOcus,int rowIndex, int column) {
            
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFOcus, rowIndex, column);
                Object tObj = table.getValueAt(rowIndex, 2);
                if (tObj == null) {
                    c.setForeground(Color.BLACK);
                    return c;
                }
                int rowTransNo;
                try {
                    rowTransNo = Integer.parseInt(tObj.toString());
                } catch (Exception ex) {
                    c.setForeground(Color.BLACK);
                    return c;
                }
                BigDecimal dTotal = debitSum.getOrDefault(rowTransNo, BigDecimal.ZERO);
                BigDecimal cTotal = creditSum.getOrDefault(rowTransNo, BigDecimal.ZERO);
                if (dTotal.compareTo(cTotal) != 0) {
                    c.setForeground(Color.RED);
                } else {
                    c.setForeground(Color.BLACK);
                }
                return c;
            }
        });
        
        jTable1.repaint();
        return hasUnbalancedInTable;
    }
    private boolean saveJournalEntry() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/accountingcycle", "root", "123456789")) {

            // Step 1: Get existing entry_ids for this project
            ArrayList<Integer> existingIds = new ArrayList<>();
            String selectSql = "SELECT entry_id FROM journal_entries WHERE project_id = ? ORDER BY entry_id ASC";
            try (PreparedStatement psSelect = conn.prepareStatement(selectSql)) {
                psSelect.setInt(1, projectId);
                try (ResultSet rs = psSelect.executeQuery()) {
                    while (rs.next()) {
                        existingIds.add(rs.getInt("entry_id"));
                    }
                }
            }

            // Step 2: Prepare statements for update and insert
            String updateSql = "UPDATE journal_entries SET entry_date=?, transaction_no=?, account_name=?, debit=?, credit=?, description=? WHERE entry_id=?";
            String insertSql = "INSERT INTO journal_entries (project_id, entry_date, transaction_no, account_name, debit, credit, description) VALUES (?, ?, ?, ?, ?, ?, ?)";

            for (int i = 0; i < model.getRowCount(); i++) {
                String accTitle = ((String) model.getValueAt(i, 1)).trim();
                String dateStr = (String) model.getValueAt(i, 0);
                SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy");
                Date date = df.parse(dateStr);
                java.sql.Date sqlDate = new java.sql.Date(date.getTime());
                int transNo = (int) model.getValueAt(i, 2);

                String debitStr = ((String) model.getValueAt(i, 3)).replace("₱", "").replace(",", "").trim();
                String creditStr = ((String) model.getValueAt(i, 4)).replace("₱", "").replace(",", "").trim();

                BigDecimal debit = debitStr.isEmpty() ? BigDecimal.ZERO : new BigDecimal(debitStr);
                BigDecimal credit = creditStr.isEmpty() ? BigDecimal.ZERO : new BigDecimal(creditStr);

                if (i < existingIds.size()) {
                    // Update existing entry
                    try (PreparedStatement psUpdate = conn.prepareStatement(updateSql)) {
                        psUpdate.setDate(1, sqlDate);
                        psUpdate.setInt(2, transNo);
                        psUpdate.setString(3, accTitle);
                        psUpdate.setBigDecimal(4, debit);
                        psUpdate.setBigDecimal(5, credit);
                        psUpdate.setString(6, ""); // optional description
                        psUpdate.setInt(7, existingIds.get(i));
                        psUpdate.executeUpdate();
                    }
                } else {
                    // Insert new entry
                    try (PreparedStatement psInsert = conn.prepareStatement(insertSql)) {
                        psInsert.setInt(1, projectId);
                        psInsert.setDate(2, sqlDate);
                        psInsert.setInt(3, transNo);
                        psInsert.setString(4, accTitle);
                        psInsert.setBigDecimal(5, debit);
                        psInsert.setBigDecimal(6, credit);
                        psInsert.setString(7, ""); // optional description
                        psInsert.executeUpdate();
                    }
                }
            }

            // Step 3: Delete extra rows in DB if table has fewer rows
            if (existingIds.size() > model.getRowCount()) {
                for (int i = model.getRowCount(); i < existingIds.size(); i++) {
                    String deleteSql = "DELETE FROM journal_entries WHERE entry_id=?";
                    try (PreparedStatement psDelete = conn.prepareStatement(deleteSql)) {
                        psDelete.setInt(1, existingIds.get(i));
                        psDelete.executeUpdate();
                    }
                }
            }

            JOptionPane.showMessageDialog(null, "Journal entries saved successfully!");
            return true;
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "ERROR: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } catch (ParseException e) {
            return false;
        }
    }
    private boolean askToSave() {
        try {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            if(model.getRowCount() == 0) throw new IllegalArgumentException("No entries to  save!"); 
            if(checkAndHighlightUnbalancedAccounts() == true) {
                throw new IllegalArgumentException("Cannot be saved! Debit and Credit must be balance!");
            } else {
                int a = JOptionPane.showConfirmDialog(null, "Do you really want to save these details?","Selection",JOptionPane.YES_NO_OPTION);
                if(a != JOptionPane.YES_OPTION) return false;
                
                boolean successful = saveJournalEntry();
                if(successful) {
                    try (Connection conn = DriverManager.getConnection(
                        "jdbc:mysql://localhost:3306/accountingcycle", "root", "123456789")) {
                        String updateSql = "UPDATE projects SET is_saved = TRUE WHERE project_id = ?";
                        PreparedStatement ps = conn.prepareStatement(updateSql);
                        ps.setInt(1, projectId);
                        ps.executeUpdate();
                    }
                    isProjectSaved = true;
                    
                    ld.recomputeAndSaveLedgers(projectId);   
                }
                
                return successful;
            }
        
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
      //  } catch(CancelException e) {
           return false;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } catch (Exception e){
            e.printStackTrace();
            return false;
        } 
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        askToSave();
    }//GEN-LAST:event_jButton9ActionPerformed
    
    private void tem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tem1ActionPerformed
    private void deleteSelectedRowOrTransaction() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row to delete!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Object[] options = {"Delete Row Only", "Delete Entire Transaction Number", "Cancel"};
        int choice = JOptionPane.showOptionDialog(
            null,
            "Do you want to delete only this row or the entire transaction?",
            "Delete Options",
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[2]);
        // Confirm deletion
        if(choice == 0) {
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this row?", 
                                                        "Confirm Delete", JOptionPane.YES_NO_OPTION);
            if (confirm != JOptionPane.YES_OPTION) return;
            
            model.removeRow(selectedRow);

        } else if (choice == 1) {
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this transaction?", 
                                                        "Confirm Delete", JOptionPane.YES_NO_OPTION);
            if (confirm != JOptionPane.YES_OPTION) return;

            // Get transaction number of selected row
            int transNoToDelete = Integer.parseInt(model.getValueAt(selectedRow, 2).toString());

            // Delete all rows with the same transaction number
            for (int i = model.getRowCount() - 1; i >= 0; i--) {
                int rowTransNo = Integer.parseInt(model.getValueAt(i, 2).toString());
                if (rowTransNo == transNoToDelete) {
                    model.removeRow(i);
                }
            }

            // Decrement transaction numbers for all rows with transNo > deleted transNo
            for (int i = 0; i < model.getRowCount(); i++) {
                int rowTransNo = Integer.parseInt(model.getValueAt(i, 2).toString());
                if (rowTransNo > transNoToDelete) {
                    model.setValueAt(rowTransNo - 1, i, 2);
                }
            }
        }
        // Reset selection and form
        clearSelectionAndForm();

        // Update the global transacNo counter to reflect deletion
        transacNo = nextTransacNoFromTable();
    }
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        deleteSelectedRowOrTransaction();
    }//GEN-LAST:event_jButton11ActionPerformed
    
    
    private void tem2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tem2MouseEntered
        // TODO add your handling code here:
        SI.showPopup(tem2);
        SI.popup.setVisible(true);
        int[] numDate = SI.getDate();
        start_month = numDate[0];
        start_year = numDate[1];
        JEA.changeDefaultDate(jDateChooser1, start_year, start_month);
    }//GEN-LAST:event_tem2MouseEntered

    private void tem2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tem2MouseExited
        // TODO add your handling code here:
        if(SI.popup != null) {
            SI.popup.setVisible(false);
        }
    }//GEN-LAST:event_tem2MouseExited
    
    public void loadJournalEntries(int journalIdKey) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing rows

        String sql = "SELECT entry_date, transaction_no, account_name, debit, credit "
                + "FROM journal_entries WHERE project_id = ? ORDER BY transaction_no";

        try (Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/accountingcycle", "root", "123456789");
            PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setInt(1, journalIdKey);
            ResultSet rs = ps.executeQuery();

            SimpleDateFormat dF = new SimpleDateFormat("MM/dd/yyyy");

            while (rs.next()) {
                int transNo = rs.getInt("transaction_no");
                String accTitle = rs.getString("account_name");
                BigDecimal debit = rs.getBigDecimal("debit");
                BigDecimal credit = rs.getBigDecimal("credit");
                Date date = rs.getDate("entry_date");

                String dateFormatted = (date != null) ? dF.format(date) : "";

                String debitStr = (debit != null && debit.compareTo(BigDecimal.ZERO) > 0)
                        ? String.format("₱%,.2f", debit)
                        : "";
                String creditStr = (credit != null && credit.compareTo(BigDecimal.ZERO) > 0)
                        ? String.format("₱%,.2f", credit)
                        : "";

                // Format account titles with indentation if credit
                if (!creditStr.isEmpty()) {
                    accTitle = "     " + accTitle;
                }

                // Add to table
                model.addRow(new Object[]{dateFormatted, accTitle, transNo, debitStr, creditStr});
            }

            rs.close();
            System.out.println("Journal entries loaded for project_id " + journalIdKey);

            //update transac no globally
            transacNo = nextTransacNoFromTable();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
                    "Error loading journal entries: " + e.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(journalEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(journalEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(journalEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(journalEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new journalEntry(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private java.awt.Label label1;
    private javax.swing.JButton tem1;
    private javax.swing.JLabel tem2;
    private javax.swing.JLabel tem3;
    private java.awt.TextField textField1;
    // End of variables declaration//GEN-END:variables
    class CancelException extends Exception {
        public CancelException() {
            super();
        }
    }

    
    
}
