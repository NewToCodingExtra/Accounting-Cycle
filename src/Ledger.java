
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.util.List;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.function.BiConsumer;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.border.Border;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Joshua
 */
public class Ledger extends javax.swing.JFrame {

    /**
     * Creates new form Ledger
     */
    int z = 0;
    private int project_key;
    private home hm;
    private ShowInitialDetails SI;

    public Ledger(home hm) {
        initComponents();
        this.hm = hm;
                
        jButton2.setVisible(false);
        jButton4.setVisible(false);
        jButton5.setVisible(false);
        
        jLabel1.setVisible(false);
        jLabel2.setVisible(false);
        jLabel4.setVisible(false);
        jLabel5.setVisible(false);
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tem2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1366, 781));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(null);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/control hide and show.png"))); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton1MouseExited(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(70, 30, 66, 67);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/home_icon.png"))); // NOI18N
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton2MouseExited(evt);
            }
        });
        jButton2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jButton2ComponentShown(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(160, 30, 66, 67);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logout.png"))); // NOI18N
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton4MouseExited(evt);
            }
        });
        jButton4.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jButton4ComponentShown(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(250, 30, 66, 67);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exit button.png"))); // NOI18N
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton5MouseExited(evt);
            }
        });
        jButton5.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jButton5ComponentShown(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(330, 30, 66, 67);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Show/Hide");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(60, 100, 78, 20);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Logout");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(250, 100, 66, 20);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Close");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(330, 100, 66, 20);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Home");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(160, 100, 66, 20);

        tem2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        tem2.setText("?");
        tem2.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        tem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tem2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tem2MouseExited(evt);
            }
        });
        getContentPane().add(tem2);
        tem2.setBounds(50, 150, 30, 40);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(50, 130, 1290, 3);

        jScrollPane1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jScrollPane1MouseWheelMoved(evt);
            }
        });
        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(80, 150, 1240, 610);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    public void setProjectId(int je) {
        this.project_key = je;
        
        SI  = new ShowInitialDetails(project_key);
        
        if(project_key > 0 )
            if(checkAdjustmentUsed(project_key))
                populateLedgerView(project_key, true);
            else 
                populateLedgerView(project_key, false);
        else
            JOptionPane.showMessageDialog(null, "Invalid project key!", "Error",JOptionPane.ERROR_MESSAGE);
    }
    public static class LedgerTxn {
        private final String txnLabel; // e.g. "1", "2" or "a1", "a2"
        private final BigDecimal amount;
        public LedgerTxn(String txnLabel, BigDecimal amount) {
            this.txnLabel = txnLabel;
            this.amount = amount == null ? BigDecimal.ZERO : amount;
        }
        public String getTxnLabel() { return txnLabel; }
        public BigDecimal getAmount() { return amount; }
    }
    private Map<String, String> createAccountMap() {
        Map<String, String> accountTypeMap = new HashMap<>();
        AccountTitle[] accountTitles;

        accountTitles = AccountTitle.ACCOUNT_TITLE;

        for (AccountTitle title : accountTitles) {
            accountTypeMap.put(title.getTitle(), title.getType());
        }

        return accountTypeMap;
    }
    public Map<String, Map<String, List<LedgerTxn>>> buildCombinedTAccounts(int projectId) {
        Map<String, Map<String, List<LedgerTxn>>> tAccounts = new HashMap<>();

        String sqlJE = "SELECT transaction_no, account_name, debit, credit FROM journal_entries WHERE project_id = ? ORDER BY transaction_no, entry_id";
        String sqlAdj = "SELECT transaction_no, account_name, debit, credit FROM adjustments WHERE project_id = ? ORDER BY transaction_no, adjustment_id";

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/accountingcycle", "root", "123456789")) {

            // 1) journal entries
            try (PreparedStatement ps = conn.prepareStatement(sqlJE)) {
                ps.setInt(1, projectId);
                try (ResultSet rs = ps.executeQuery()) {
                    while (rs.next()) {
                        int txn = rs.getInt("transaction_no");
                        String label = Integer.toString(txn);
                        String accRaw = rs.getString("account_name").trim();
                        String acc = accRaw.contains(",") ? accRaw.split(",")[1].trim() : accRaw;  
                        BigDecimal d = rs.getBigDecimal("debit");
                        BigDecimal c = rs.getBigDecimal("credit");

                        if (d != null && d.compareTo(BigDecimal.ZERO) > 0) {
                            tAccounts.putIfAbsent(acc, new HashMap<>());
                            Map<String, List<LedgerTxn>> sides = tAccounts.get(acc);
                            sides.putIfAbsent("debit", new ArrayList<>());
                            sides.get("debit").add(new LedgerTxn(label, d));
                        }
                        if (c != null && c.compareTo(BigDecimal.ZERO) > 0) {
                            tAccounts.putIfAbsent(acc, new HashMap<>());
                            Map<String, List<LedgerTxn>> sides = tAccounts.get(acc);
                            sides.putIfAbsent("credit", new ArrayList<>());
                            sides.get("credit").add(new LedgerTxn(label, c));
                        }
                    }
                }
            }

            // 2) adjustments — but first check if adjustments used
            boolean adjUsed = false;
            String qCheckAdj = "SELECT adjustment_is_used FROM projects WHERE project_id = ?";
            try (PreparedStatement psCheck = conn.prepareStatement(qCheckAdj)) {
                psCheck.setInt(1, projectId);
                try (ResultSet rs = psCheck.executeQuery()) {
                    if (rs.next()) adjUsed = rs.getBoolean("adjustment_is_used");
                }
            }

            if (adjUsed) {
                try (PreparedStatement ps = conn.prepareStatement(sqlAdj)) {
                    ps.setInt(1, projectId);
                    try (ResultSet rs = ps.executeQuery()) {
                        while (rs.next()) {
                            int txn = rs.getInt("transaction_no");
                            String label = "a" + txn; // prefix adjustments
                            String accRaw = rs.getString("account_name").trim();
                            String acc = accRaw.contains(",") ? accRaw.split(",")[1].trim() : accRaw;  
                            BigDecimal d = rs.getBigDecimal("debit");
                            BigDecimal c = rs.getBigDecimal("credit");

                            if (d != null && d.compareTo(BigDecimal.ZERO) > 0) {
                                tAccounts.putIfAbsent(acc, new HashMap<>());
                                Map<String, List<LedgerTxn>> sides = tAccounts.get(acc);
                                sides.putIfAbsent("debit", new ArrayList<>());
                                sides.get("debit").add(new LedgerTxn(label, d));
                            }
                            if (c != null && c.compareTo(BigDecimal.ZERO) > 0) {
                                tAccounts.putIfAbsent(acc, new HashMap<>());
                                Map<String, List<LedgerTxn>> sides = tAccounts.get(acc);
                                sides.putIfAbsent("credit", new ArrayList<>());
                                sides.get("credit").add(new LedgerTxn(label, c));
                            }
                        }
                    }
                }
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return tAccounts;
    }
    public Map<String, Map<String, List<LedgerTxn>>> buildAdjustedOnlyTAccounts(int projectId) {
        Map<String, Map<String, List<LedgerTxn>>> tAccounts = new HashMap<>();
        String sqlAdj = "SELECT transaction_no, account_name, debit, credit FROM adjustments WHERE project_id = ? ORDER BY transaction_no, adjustment_id";

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/accountingcycle", "root", "123456789");
             PreparedStatement ps = conn.prepareStatement(sqlAdj)) {

            ps.setInt(1, projectId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    int txn = rs.getInt("transaction_no");
                    String label = "a" + txn; // prefix adjustments
                    String accRaw = rs.getString("account_name").trim();
                    String acc = accRaw.contains(",") ? accRaw.split(",")[1].trim() : accRaw;  
                    BigDecimal d = rs.getBigDecimal("debit");
                    BigDecimal c = rs.getBigDecimal("credit");

                    tAccounts.putIfAbsent(acc, new HashMap<>());
                    Map<String, List<LedgerTxn>> sides = tAccounts.get(acc);

                    if (d != null && d.compareTo(BigDecimal.ZERO) > 0) {
                        sides.putIfAbsent("debit", new ArrayList<>());
                        sides.get("debit").add(new LedgerTxn(label, d));
                    }
                    if (c != null && c.compareTo(BigDecimal.ZERO) > 0) {
                        sides.putIfAbsent("credit", new ArrayList<>());
                        sides.get("credit").add(new LedgerTxn(label, c));
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return tAccounts;
    }

    public Map<String, Map<String, List<LedgerTxn>>> buildTAccountsJournalOnly(int projectId) {
        Map<String, Map<String, List<LedgerTxn>>> tAccounts = new HashMap<>();

        String sqlJE = "SELECT transaction_no, account_name, debit, credit FROM journal_entries WHERE project_id = ? ORDER BY transaction_no, entry_id";
        String sqlAdj = "SELECT transaction_no, account_name, debit, credit FROM adjustments WHERE project_id = ? ORDER BY transaction_no, adjustment_id";

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/accountingcycle", "root", "123456789")) {

            // 1) journal entries
            try (PreparedStatement ps = conn.prepareStatement(sqlJE)) {
                ps.setInt(1, projectId);
                try (ResultSet rs = ps.executeQuery()) {
                    while (rs.next()) {
                        int txn = rs.getInt("transaction_no");
                        String label = Integer.toString(txn);
                        String accRaw = rs.getString("account_name").trim();
                        String acc = accRaw.contains(",") ? accRaw.split(",")[1].trim() : accRaw;  
                        BigDecimal d = rs.getBigDecimal("debit");
                        BigDecimal c = rs.getBigDecimal("credit");

                        if (d != null && d.compareTo(BigDecimal.ZERO) > 0) {
                            tAccounts.putIfAbsent(acc, new HashMap<>());
                            Map<String, List<LedgerTxn>> sides = tAccounts.get(acc);
                            sides.putIfAbsent("debit", new ArrayList<>());
                            sides.get("debit").add(new LedgerTxn(label, d));
                        }
                        if (c != null && c.compareTo(BigDecimal.ZERO) > 0) {
                            tAccounts.putIfAbsent(acc, new HashMap<>());
                            Map<String, List<LedgerTxn>> sides = tAccounts.get(acc);
                            sides.putIfAbsent("credit", new ArrayList<>());
                            sides.get("credit").add(new LedgerTxn(label, c));
                        }
                    }
                }
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return tAccounts;
    }

    private JLabel cellLabel(String text,
                         Font font,
                         Border border,
                         int width,
                         int height) {
        return cellLabel(text, font, border, width, height, null);
    }

    /**
     * Creates a centered JLabel with the given text, font, border, size,
     * and an optional background color.
     */
    private JLabel cellLabel(String text,
                             Font font,
                             Border border,
                             int width,
                             int height,
                             Color background) {
        JLabel lbl = new JLabel(text, SwingConstants.CENTER);
        lbl.setFont(font);
        lbl.setBorder(border);
        lbl.setPreferredSize(new Dimension(width, height));

        if (background != null) {
            lbl.setOpaque(true);
            lbl.setBackground(background);
        }

        return lbl;
    }
    Map<String, List<Transaction>> convertToTxn(Map<String, List<LedgerTxn>> sides) {
        Map<String, List<Transaction>> result = new HashMap<>();
        result.put("debit", sides.getOrDefault("debit", List.of()).stream()
            .map(lt -> new Transaction( lt.getAmount(), Integer.parseInt(lt.getTxnLabel()))) // <-- adapt constructor
            .toList());
        result.put("credit", sides.getOrDefault("credit", List.of()).stream()
            .map(lt -> new Transaction(lt.getAmount(), Integer.parseInt(lt.getTxnLabel())))
            .toList());
        return result;
    }
    private String normalizeType(String type) {
        if (type.startsWith("Contra-")) {
            return type.substring(7); // remove "Contra-"
            
        }
        return type;
    }
    
    public void populateLedgerView(int projectId, boolean showCombined) {
        Map<String, String> accountTypeMap = createAccountMap();

        Map<String, Map<String, List<LedgerTxn>>> tUn = buildTAccountsJournalOnly(projectId);
        Map<String, Map<String, List<LedgerTxn>>> tAdj = buildAdjustedOnlyTAccounts(projectId);
        Map<String, Map<String, List<LedgerTxn>>> tCombined = buildCombinedTAccounts(projectId);

        List<LedgerSummary> unadjustedSummaries = new ArrayList<>();
        List<LedgerSummary> adjustedSummaries = new ArrayList<>();

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        mainPanel.setBackground(Color.WHITE);

        String currentType = null;
        JPanel typePanel = null;

        AccountTitle[] orderedTitles = AccountTitle.ACCOUNT_TITLE;
        Set<String> handled = new HashSet<>();

        for (AccountTitle title : orderedTitles) {
            String accountName = title.getTitle();

            Map<String, List<LedgerTxn>> sidesUn = tUn.get(accountName);
            Map<String, List<LedgerTxn>> sidesAdj = tAdj.get(accountName);

            if ((sidesUn == null || sidesUn.isEmpty()) && (sidesAdj == null || sidesAdj.isEmpty())) {
                continue;
            }

            String rawType = accountTypeMap.getOrDefault(accountName, title.getType());
            String type = normalizeType(rawType);

            if (typePanel == null || !type.equals(currentType)) {
                if (typePanel != null) {
                    mainPanel.add(typePanel);
                    mainPanel.add(Box.createVerticalStrut(20));
                }
                currentType = type;
                typePanel = new JPanel(new GridLayout(0, 2, 20, 20));
                typePanel.setBackground(Color.WHITE);
            }

            List<LedgerTxn> debitUnList = (sidesUn == null) ? List.of() : sidesUn.getOrDefault("debit", List.of());
            List<LedgerTxn> creditUnList = (sidesUn == null) ? List.of() : sidesUn.getOrDefault("credit", List.of());

            if ((debitUnList.isEmpty() && creditUnList.isEmpty()) && (sidesAdj != null && !sidesAdj.isEmpty())) {
           
            } else if (debitUnList.isEmpty() && creditUnList.isEmpty()) {
               continue; // nothing to show
            }
      
            if (!(debitUnList.isEmpty() && creditUnList.isEmpty())) {
                BigDecimal totDU = debitUnList.stream().map(LedgerTxn::getAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
                BigDecimal totCU = creditUnList.stream().map(LedgerTxn::getAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
                BigDecimal remU = totDU.subtract(totCU).abs();
                boolean isDebitU = totDU.compareTo(totCU) >= 0;
                unadjustedSummaries.add(new LedgerSummary(accountName,
                        isDebitU ? remU : BigDecimal.ZERO,
                        isDebitU ? BigDecimal.ZERO : remU));
            }

            Map<String, List<LedgerTxn>> sidesComb = tCombined.getOrDefault(accountName, Map.of());
            BigDecimal totDC = sidesComb.getOrDefault("debit", List.of())
                                        .stream().map(LedgerTxn::getAmount)
                                        .reduce(BigDecimal.ZERO, BigDecimal::add);
            BigDecimal totCC = sidesComb.getOrDefault("credit", List.of())
                                        .stream().map(LedgerTxn::getAmount)
                                        .reduce(BigDecimal.ZERO, BigDecimal::add);
            BigDecimal remC = totDC.subtract(totCC).abs();
            boolean isDebitC = totDC.compareTo(totCC) >= 0;
            adjustedSummaries.add(new LedgerSummary(accountName,
                    isDebitC ? remC : BigDecimal.ZERO,
                    isDebitC ? BigDecimal.ZERO : remC));

            JPanel tPanel;
            if (showCombined) {
                tPanel = buildTAccountPanelCombined(accountName, rawType, sidesUn, sidesAdj);
            } else {
                tPanel = buildTAccountPanel(accountName, rawType, convertToTxn(sidesUn)); // journal only
            }

            typePanel.add(tPanel);
            handled.add(accountName);
        }

        if (typePanel != null) {
            mainPanel.add(typePanel);
            mainPanel.add(Box.createVerticalStrut(20));
            typePanel = null;
            currentType = null;
        }

        Set<String> adjOnlyAccounts = new LinkedHashSet<>(tAdj.keySet());
        adjOnlyAccounts.removeAll(handled);

        for (String acc : adjOnlyAccounts) {
            Map<String, List<LedgerTxn>> sidesAdjOnly = tAdj.get(acc);
            if (sidesAdjOnly == null || sidesAdjOnly.isEmpty()) continue;

            String type = accountTypeMap.getOrDefault(acc, "Adjustment");
            String groupType = normalizeType(type);
            
            if (typePanel == null || !groupType.equals(currentType)) {
                if (typePanel != null) {
                    mainPanel.add(typePanel);
                    mainPanel.add(Box.createVerticalStrut(20));
                }
                currentType = groupType;
                typePanel = new JPanel(new GridLayout(0, 2, 20, 20));
                typePanel.setBackground(Color.WHITE);
            }

            List<LedgerTxn> debitAdjList = sidesAdjOnly.getOrDefault("debit", List.of());
            List<LedgerTxn> creditAdjList = sidesAdjOnly.getOrDefault("credit", List.of());
            BigDecimal totDA = debitAdjList.stream().map(LedgerTxn::getAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
            BigDecimal totCA = creditAdjList.stream().map(LedgerTxn::getAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
            BigDecimal remA = totDA.subtract(totCA).abs();
            boolean isDebitA = totDA.compareTo(totCA) >= 0;
            adjustedSummaries.add(new LedgerSummary(acc,
                    isDebitA ? remA : BigDecimal.ZERO,
                    isDebitA ? BigDecimal.ZERO : remA));

            if (showCombined) {
                JPanel tPanel = buildTAccountPanelCombined(acc, type, Map.of(), sidesAdjOnly);
                typePanel.add(tPanel);
                handled.add(acc);
            }
        }

        if (typePanel != null) {
            mainPanel.add(typePanel);
        }

        saveLedgerSummariesUTB(projectId, unadjustedSummaries);

        boolean adjUsed = checkAdjustmentUsed(projectId);
        if (adjUsed) {
            saveAdjustedLedgerSummaries(projectId, adjustedSummaries);
        }

        jScrollPane1.setViewportView(mainPanel);
    }

    private boolean checkAdjustmentUsed(int projectId) {
        String q = "SELECT adjustment_is_used FROM projects WHERE project_id = ?";
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/accountingcycle", "root", "123456789");
             PreparedStatement ps = conn.prepareStatement(q)) {
            ps.setInt(1, projectId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) return rs.getBoolean("adjustment_is_used");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return false;
    }
    
   private JPanel buildTAccountPanelCombined(
        String accountName,
        String type,
        Map<String, List<LedgerTxn>> jeSides,
        Map<String, List<LedgerTxn>> adjSides) {

        final int COL_W_TXN = 40, COL_W_AMT = 240, SCROLL_W = 16, ROW_H = 30, MIN_ROWS = 11 + 2;
        Font cellFont = new Font("Tahoma", Font.PLAIN, 14);
        Font boldFont = new Font("Tahoma", Font.BOLD, 14);
        Border cellBorder = BorderFactory.createLineBorder(Color.LIGHT_GRAY);
        int GRID_W = COL_W_TXN + COL_W_AMT * 2 + COL_W_TXN + SCROLL_W;

        List<LedgerTxn> jeDebits = (jeSides == null) ? List.of() : jeSides.getOrDefault("debit", List.of());
        List<LedgerTxn> jeCredits = (jeSides == null) ? List.of() : jeSides.getOrDefault("credit", List.of());
        List<LedgerTxn> adjDebits = (adjSides == null) ? List.of() : adjSides.getOrDefault("debit", List.of());
        List<LedgerTxn> adjCredits = (adjSides == null) ? List.of() : adjSides.getOrDefault("credit", List.of());

        BigDecimal totJE_D = jeDebits.stream().map(LedgerTxn::getAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
        BigDecimal totJE_C = jeCredits.stream().map(LedgerTxn::getAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
        BigDecimal remJE = totJE_D.subtract(totJE_C).abs();
        boolean isDebitJE = totJE_D.compareTo(totJE_C) >= 0;

        List<LedgerTxn> combinedDebits = new ArrayList<>(jeDebits);
        combinedDebits.addAll(adjDebits);
        List<LedgerTxn> combinedCredits = new ArrayList<>(jeCredits);
        combinedCredits.addAll(adjCredits);
        BigDecimal totComb_D = combinedDebits.stream().map(LedgerTxn::getAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
        BigDecimal totComb_C = combinedCredits.stream().map(LedgerTxn::getAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
        BigDecimal remComb = totComb_D.subtract(totComb_C).abs();
        boolean isDebitComb = totComb_D.compareTo(totComb_C) >= 0;

        // Header
        JLabel titleLbl = new JLabel(accountName + " (" + type + ")", SwingConstants.CENTER);
        titleLbl.setFont(boldFont);
        JPanel header = new JPanel(new BorderLayout());
        header.add(titleLbl, BorderLayout.CENTER);
        header.setPreferredSize(new Dimension(GRID_W, ROW_H));
        header.setMaximumSize(header.getPreferredSize());

        // Grid
        JPanel grid = new JPanel(new GridBagLayout());
        grid.setBackground(Color.WHITE);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(0, 0, 0, 0);
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill = GridBagConstraints.NONE;

        BiConsumer<JLabel, Integer> placeCell = (lbl, col) -> {
            gbc.gridx = col;
            grid.add(lbl, gbc);
        };

        int jeRows = Math.max(jeDebits.size(), jeCredits.size());
        int adjRows = Math.max(adjDebits.size(), adjCredits.size());
        boolean hasJE = jeRows > 0;
        boolean hasAdj = adjRows > 0;

        int jeSummaryCount = hasJE ? 2 : 0;   
        int adjSummaryCount = hasAdj ? 2 : 0; 

        int totalNeeded = jeRows + jeSummaryCount + adjRows + adjSummaryCount;
        int blanks = Math.max(0, MIN_ROWS - totalNeeded);

        int jeBlanks = 0, adjBlanks = 0;
        if (hasJE && hasAdj) {
            jeBlanks = blanks / 2;
            adjBlanks = blanks - jeBlanks; 
        } else if (hasJE) {
            jeBlanks = blanks;
        } else if (hasAdj) {
            adjBlanks = blanks;
        }

        int totalsRow = 0;

        for (int r = 0; r < jeRows; r++) {
            gbc.gridy = totalsRow++;
            LedgerTxn d = (r < jeDebits.size()) ? jeDebits.get(r) : null;
            LedgerTxn c = (r < jeCredits.size()) ? jeCredits.get(r) : null;

            placeCell.accept(cellLabel(d != null ? d.getTxnLabel() : "", cellFont, cellBorder, COL_W_TXN, ROW_H), 0);
            placeCell.accept(cellLabel(d != null ? CurrencyFormatter.formatPeso(d.getAmount()) : "", cellFont, cellBorder, COL_W_AMT, ROW_H), 1);
            placeCell.accept(cellLabel(c != null ? CurrencyFormatter.formatPeso(c.getAmount()) : "", cellFont, cellBorder, COL_W_AMT, ROW_H), 2);
            placeCell.accept(cellLabel(c != null ? c.getTxnLabel() : "", cellFont, cellBorder, COL_W_TXN, ROW_H), 3);
            placeCell.accept(cellLabel("", cellFont, cellBorder, SCROLL_W, ROW_H), 4);
        }

        for (int i = 0; i < jeBlanks; i++) {
            gbc.gridy = totalsRow++;
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 0);
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_AMT, ROW_H), 1);
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_AMT, ROW_H), 2);
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 3);
            placeCell.accept(cellLabel("", cellFont, cellBorder, SCROLL_W, ROW_H), 4);
        }

        if (hasJE) {
            // Totals
            gbc.gridy = totalsRow++;
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 0);
            placeCell.accept(cellLabel("Total: " + CurrencyFormatter.formatPeso(totJE_D),
                    cellFont.deriveFont(Font.BOLD), cellBorder, COL_W_AMT, ROW_H, new Color(200, 255, 200)), 1);
            placeCell.accept(cellLabel("Total: " + CurrencyFormatter.formatPeso(totJE_C),
                    cellFont.deriveFont(Font.BOLD), cellBorder, COL_W_AMT, ROW_H, new Color(200, 255, 200)), 2);
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 3);
            placeCell.accept(cellLabel("", cellFont, cellBorder, SCROLL_W, ROW_H), 4);

            gbc.gridy = totalsRow++;
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 0);
            placeCell.accept(cellLabel(isDebitJE ? CurrencyFormatter.formatPeso(remJE) : "",
                    cellFont.deriveFont(Font.BOLD), cellBorder, COL_W_AMT, ROW_H, new Color(255, 230, 200)), 1);
            placeCell.accept(cellLabel(!isDebitJE ? CurrencyFormatter.formatPeso(remJE) : "",
                    cellFont.deriveFont(Font.BOLD), cellBorder, COL_W_AMT, ROW_H, new Color(255, 230, 200)), 2);
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 3);
            placeCell.accept(cellLabel("", cellFont, cellBorder, SCROLL_W, ROW_H), 4);
        }

        for (int r = 0; r < adjRows; r++) {
            gbc.gridy = totalsRow++;
            LedgerTxn d = (r < adjDebits.size()) ? adjDebits.get(r) : null;
            LedgerTxn c = (r < adjCredits.size()) ? adjCredits.get(r) : null;

            placeCell.accept(cellLabel(d != null ? d.getTxnLabel() : "", cellFont, cellBorder, COL_W_TXN, ROW_H), 0);
            placeCell.accept(cellLabel(d != null ? CurrencyFormatter.formatPeso(d.getAmount()) : "", cellFont, cellBorder, COL_W_AMT, ROW_H), 1);
            placeCell.accept(cellLabel(c != null ? CurrencyFormatter.formatPeso(c.getAmount()) : "", cellFont, cellBorder, COL_W_AMT, ROW_H), 2);
            placeCell.accept(cellLabel(c != null ? c.getTxnLabel() : "", cellFont, cellBorder, COL_W_TXN, ROW_H), 3);
            placeCell.accept(cellLabel("", cellFont, cellBorder, SCROLL_W, ROW_H), 4);
        }

        for (int i = 0; i < adjBlanks; i++) {
            gbc.gridy = totalsRow++;
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 0);
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_AMT, ROW_H), 1);
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_AMT, ROW_H), 2);
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 3);
            placeCell.accept(cellLabel("", cellFont, cellBorder, SCROLL_W, ROW_H), 4);
        }

        if (hasAdj) {
            gbc.gridy = totalsRow++;
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 0);
            placeCell.accept(cellLabel("Adjusted Total: " + CurrencyFormatter.formatPeso(totComb_D),
                    cellFont.deriveFont(Font.BOLD), cellBorder, COL_W_AMT, ROW_H, new Color(200, 255, 200)), 1);
            placeCell.accept(cellLabel("Adjusted Total: " + CurrencyFormatter.formatPeso(totComb_C),
                    cellFont.deriveFont(Font.BOLD), cellBorder, COL_W_AMT, ROW_H, new Color(200, 255, 200)), 2);
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 3);
            placeCell.accept(cellLabel("", cellFont, cellBorder, SCROLL_W, ROW_H), 4);

            gbc.gridy = totalsRow++;
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 0);
            placeCell.accept(cellLabel(isDebitComb ? CurrencyFormatter.formatPeso(remComb) : "",
                    cellFont.deriveFont(Font.BOLD), cellBorder, COL_W_AMT, ROW_H, new Color(255, 230, 200)), 1);
            placeCell.accept(cellLabel(!isDebitComb ? CurrencyFormatter.formatPeso(remComb) : "",
                    cellFont.deriveFont(Font.BOLD), cellBorder, COL_W_AMT, ROW_H, new Color(255, 230, 200)), 2);
            placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 3);
            placeCell.accept(cellLabel("", cellFont, cellBorder, SCROLL_W, ROW_H), 4);
        }

        int totalRowsRendered = Math.max(MIN_ROWS, totalsRow);
        grid.setPreferredSize(new Dimension(GRID_W, totalRowsRendered * ROW_H));

        JScrollPane scroll = new JScrollPane(grid,
                (totalRowsRendered > MIN_ROWS) ? JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED : JScrollPane.VERTICAL_SCROLLBAR_NEVER,
                JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scroll.setPreferredSize(new Dimension(GRID_W, MIN_ROWS * ROW_H));
        scroll.setMaximumSize(scroll.getPreferredSize());
        scroll.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        scroll.getVerticalScrollBar().setUnitIncrement(ROW_H);

        JPanel wrapper = new JPanel();
        wrapper.setLayout(new BoxLayout(wrapper, BoxLayout.Y_AXIS));
        wrapper.add(header);
        wrapper.add(scroll);
        wrapper.setMaximumSize(new Dimension(GRID_W, header.getPreferredSize().height + scroll.getPreferredSize().height));

        return wrapper;
    }

    public JPanel buildTAccountPanel(
        String accountName,
        String type,
        Map<String, List<Transaction>> sides) {

        List<Transaction> debits  = sides.getOrDefault("debit",  new ArrayList<>());
        List<Transaction> credits = sides.getOrDefault("credit", new ArrayList<>());
        final int COL_W_TXN = 40;
        final int COL_W_AMT = 240;
        final int SCROLL_W = 16;
        final int GRID_W = COL_W_TXN + COL_W_AMT + COL_W_AMT + COL_W_TXN + SCROLL_W;
        final int ROW_H = 30;
        final int MIN_ROWS = 11;
        final int SUM_ROWS = 2;
        
        int dataRows = Math.max(debits.size(), credits.size());
        
        Font cellFont  = new Font("Tahoma", Font.PLAIN, 14);
        Font boldFont  = new Font("Tahoma", Font.BOLD, 14);
        Border cellBorder = BorderFactory.createLineBorder(Color.LIGHT_GRAY);

        JLabel titleLbl = new JLabel(accountName + " (" + type + ")", SwingConstants.CENTER);
        titleLbl.setFont(boldFont);
        JPanel header = new JPanel(new BorderLayout());
        header.add(titleLbl, BorderLayout.CENTER);
        header.setPreferredSize(new Dimension(GRID_W, ROW_H));
        header.setMaximumSize(header.getPreferredSize());

        JPanel grid = new JPanel(new GridBagLayout());
        grid.setBackground(Color.WHITE);

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(0, 0, 0, 0);
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill   = GridBagConstraints.NONE;

        BiConsumer<JLabel,Integer> placeCell = (lbl, col) -> {
            gbc.gridx = col;
            grid.add(lbl, gbc);
        };

        int rowCount = Math.max(dataRows, MIN_ROWS);

        for (int r = 0; r < rowCount; r++) {
            Transaction d = r < debits.size()  ? debits.get(r)  : null;
            Transaction c = r < credits.size() ? credits.get(r) : null;

            gbc.gridy = r;  // row index

            JLabel dn = cellLabel(
                d != null ? String.valueOf(d.getTransactionNo()) : "",
                cellFont, cellBorder, COL_W_TXN, ROW_H
            );
            JLabel da = cellLabel(
                d != null ? CurrencyFormatter.formatPeso(d.getAmount()) : "",
                cellFont, cellBorder, COL_W_AMT, ROW_H
            );
            JLabel ca = cellLabel(
                c != null ? CurrencyFormatter.formatPeso(c.getAmount()) : "",
                cellFont, cellBorder, COL_W_AMT, ROW_H
            );
            JLabel cn = cellLabel(
                c != null ? String.valueOf(c.getTransactionNo()) : "",
                cellFont, cellBorder, COL_W_TXN, ROW_H
            );
            JLabel gutter = cellLabel("", cellFont, cellBorder, SCROLL_W, ROW_H);

            placeCell.accept(dn, 0);
            placeCell.accept(da, 1);
            placeCell.accept(ca, 2);
            placeCell.accept(cn, 3);
            placeCell.accept(gutter, 4);
        }

        // 4) Totals row
        BigDecimal totD = debits.stream()
                                .map(Transaction::getAmount)
                                .reduce(BigDecimal.ZERO, BigDecimal::add);
        BigDecimal totC = credits.stream()
                                 .map(Transaction::getAmount)
                                 .reduce(BigDecimal.ZERO, BigDecimal::add);

        gbc.gridy = rowCount;
        placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 0);
        placeCell.accept(cellLabel("Total: " + CurrencyFormatter.formatPeso(totD),
            cellFont.deriveFont(Font.BOLD), cellBorder, COL_W_AMT, ROW_H,
            new Color(200,255,200)), 1);
        placeCell.accept(cellLabel("Total: " + CurrencyFormatter.formatPeso(totC),
            cellFont.deriveFont(Font.BOLD), cellBorder, COL_W_AMT, ROW_H,
            new Color(200,255,200)), 2);
        placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 3);
        placeCell.accept(cellLabel("", cellFont, cellBorder, SCROLL_W, ROW_H), 4);

        // 5) Remaining row
        BigDecimal rem = totD.subtract(totC).abs();
        boolean isDebit = totD.compareTo(totC) >= 0;

        gbc.gridy = rowCount + 1;
        placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 0);
        placeCell.accept(cellLabel(
            isDebit ? CurrencyFormatter.formatPeso(rem) : "",
            cellFont.deriveFont(Font.BOLD), cellBorder, COL_W_AMT, ROW_H,
            new Color(255,230,200)), 1);
        placeCell.accept(cellLabel(
            !isDebit ? CurrencyFormatter.formatPeso(rem) : "",
            cellFont.deriveFont(Font.BOLD), cellBorder, COL_W_AMT, ROW_H,
            new Color(255,230,200)), 2);
        placeCell.accept(cellLabel("", cellFont, cellBorder, COL_W_TXN, ROW_H), 3);
        placeCell.accept(cellLabel("", cellFont, cellBorder, SCROLL_W, ROW_H), 4);
        
        int totalRenderedRows = rowCount + SUM_ROWS;
        int gridPrefH = totalRenderedRows * ROW_H;
        grid.setPreferredSize(new Dimension(GRID_W, gridPrefH));
        
        int fixedViewportRows = MIN_ROWS + SUM_ROWS;
        int viewportH = fixedViewportRows * ROW_H;
        
        JScrollPane scroll = new JScrollPane(
            grid,
            (dataRows > MIN_ROWS) ? JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED 
                                  : JScrollPane.VERTICAL_SCROLLBAR_NEVER,
            JScrollPane.HORIZONTAL_SCROLLBAR_NEVER
        );
        
        scroll.setPreferredSize(new Dimension(GRID_W, viewportH));
        scroll.setMaximumSize(new Dimension(GRID_W, viewportH));
        scroll.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        scroll.getVerticalScrollBar().setUnitIncrement(ROW_H);

        JPanel wrapper = new JPanel();
        wrapper.setLayout(new BoxLayout(wrapper, BoxLayout.Y_AXIS));
        wrapper.add(header);
        wrapper.add(scroll);

        wrapper.setMaximumSize(new Dimension(GRID_W, header.getPreferredSize().height + viewportH));
        return wrapper;
    }
    public void saveLedgerSummariesUTB(int projectId, List<LedgerSummary> summaries) {
        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/accountingcycle", "root", "123456789")) {

            boolean isNewProjectLedger = false;
            String checkSql = "SELECT COUNT(*) FROM unadjusted_ledger WHERE project_id = ?";
            try (PreparedStatement psCheck = conn.prepareStatement(checkSql)) {
                psCheck.setInt(1, projectId);
                try (ResultSet rs = psCheck.executeQuery()) {
                    if (rs.next()) {
                        isNewProjectLedger = rs.getInt(1) == 0;
                    }
                }
            }

            if (isNewProjectLedger) {
               
                String insertSql = "INSERT INTO unadjusted_ledger (project_id, account_name, debit_total, credit_total) VALUES (?, ?, ?, ?)";
                for (LedgerSummary summary : summaries) {
                    try (PreparedStatement psInsert = conn.prepareStatement(insertSql)) {
                        psInsert.setInt(1, projectId);
                        psInsert.setString(2, summary.getAccountName().trim());
                        psInsert.setBigDecimal(3, summary.getDebitTotal());
                        psInsert.setBigDecimal(4, summary.getCreditTotal());
                        psInsert.executeUpdate();
                    }
                }
            } else {
               
                Map<String, Integer> existingRows = new HashMap<>();
                String selectSql = "SELECT ledger_id, account_name FROM unadjusted_ledger WHERE project_id = ?";
                try (PreparedStatement psSelect = conn.prepareStatement(selectSql)) {
                    psSelect.setInt(1, projectId);
                    try (ResultSet rs = psSelect.executeQuery()) {
                        while (rs.next()) {
                            existingRows.put(rs.getString("account_name").trim(), rs.getInt("ledger_id"));
                        }
                    }
                }

                Set<String> newAccountNames = new HashSet<>();
                for (LedgerSummary summary : summaries) {
                    String accName = summary.getAccountName().trim();
                    BigDecimal debit = summary.getDebitTotal();
                    BigDecimal credit = summary.getCreditTotal();
                    newAccountNames.add(accName);

                    if (existingRows.containsKey(accName)) {
                        String updateSql = "UPDATE unadjusted_ledger SET debit_total=?, credit_total=? WHERE ledger_id=?";
                        try (PreparedStatement psUpdate = conn.prepareStatement(updateSql)) {
                            psUpdate.setBigDecimal(1, debit);
                            psUpdate.setBigDecimal(2, credit);
                            psUpdate.setInt(3, existingRows.get(accName));
                            psUpdate.executeUpdate();
                        }
                    } else {
                        String insertSql = "INSERT INTO unadjusted_ledger (project_id, account_name, debit_total, credit_total) VALUES (?, ?, ?, ?)";
                        try (PreparedStatement psInsert = conn.prepareStatement(insertSql)) {
                            psInsert.setInt(1, projectId);
                            psInsert.setString(2, accName);
                            psInsert.setBigDecimal(3, debit);
                            psInsert.setBigDecimal(4, credit);
                            psInsert.executeUpdate();
                        }
                    }
                }

                for (Map.Entry<String, Integer> entry : existingRows.entrySet()) {
                    if (!newAccountNames.contains(entry.getKey())) {
                        String deleteSql = "DELETE FROM unadjusted_ledger WHERE ledger_id=?";
                        try (PreparedStatement psDelete = conn.prepareStatement(deleteSql)) {
                            psDelete.setInt(1, entry.getValue());
                            psDelete.executeUpdate();
                        }
                    }
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();  
        }
    }
    public void saveAdjustedLedgerSummaries(int projectId, List<LedgerSummary> summaries) {
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/accountingcycle", "root", "123456789")) {
            boolean has = false;
            String chk = "SELECT COUNT(*) FROM adjusted_ledger WHERE project_id = ?";
            try (PreparedStatement ps = conn.prepareStatement(chk)) {
                ps.setInt(1, projectId);
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) has = rs.getInt(1) > 0;
                }
            }

            if (!has) {
                String insert = "INSERT INTO adjusted_ledger (project_id, account_name, debit_total, credit_total) VALUES (?, ?, ?, ?)";
                for (LedgerSummary s : summaries) {
                    try (PreparedStatement ps = conn.prepareStatement(insert)) {
                        ps.setInt(1, projectId);
                        ps.setString(2, s.getAccountName().trim());
                        ps.setBigDecimal(3, s.getDebitTotal());
                        ps.setBigDecimal(4, s.getCreditTotal());
                        ps.executeUpdate();
                    }
                }
            } else {
                // load existing rows -> update or insert, then delete obsolete (same logic you used)
                Map<String, Integer> existing = new HashMap<>();
                String sel = "SELECT ledger_id, account_name FROM adjusted_ledger WHERE project_id = ?";
                try (PreparedStatement ps = conn.prepareStatement(sel)) {
                    ps.setInt(1, projectId);
                    try (ResultSet rs = ps.executeQuery()) {
                        while (rs.next()) existing.put(rs.getString("account_name").trim(), rs.getInt("ledger_id"));
                    }
                }

                Set<String> newNames = new HashSet<>();
                for (LedgerSummary s : summaries) {
                    String name = s.getAccountName().trim();
                    newNames.add(name);
                    if (existing.containsKey(name)) {
                        String upd = "UPDATE adjusted_ledger SET debit_total = ?, credit_total = ? WHERE ledger_id = ?";
                        try (PreparedStatement ps = conn.prepareStatement(upd)) {
                            ps.setBigDecimal(1, s.getDebitTotal());
                            ps.setBigDecimal(2, s.getCreditTotal());
                            ps.setInt(3, existing.get(name));
                            ps.executeUpdate();
                        }
                    } else {
                        String ins = "INSERT INTO adjusted_ledger (project_id, account_name, debit_total, credit_total) VALUES (?, ?, ?, ?)";
                        try (PreparedStatement ps = conn.prepareStatement(ins)) {
                            ps.setInt(1, projectId);
                            ps.setString(2, name);
                            ps.setBigDecimal(3, s.getDebitTotal());
                            ps.setBigDecimal(4, s.getCreditTotal());
                            ps.executeUpdate();
                        }
                    }
                }

                // delete obsolete
                for (Map.Entry<String,Integer> e : existing.entrySet()) {
                    if (!newNames.contains(e.getKey())) {
                        try (PreparedStatement ps = conn.prepareStatement("DELETE FROM adjusted_ledger WHERE ledger_id = ?")) {
                            ps.setInt(1, e.getValue());
                            ps.executeUpdate();
                        }
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private boolean confirmAction(String message) {
        int result = JOptionPane.showConfirmDialog(null, message, "Select", JOptionPane.YES_NO_OPTION);
        return result == JOptionPane.YES_OPTION;
    }
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        if(z == 0)
        {
            try{
                Thread.sleep(10);
                jButton2.setVisible(true);
            }catch(Exception e) {

            }
        } else {
            jButton2.setVisible(false);
            
            jButton4.setVisible(false);
            jButton5.setVisible(false);

            z = 0;
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        // TODO add your handling code here:
        jLabel1.setVisible(true);
    }//GEN-LAST:event_jButton1MouseEntered

    private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
        // TODO add your handling code here:
        jLabel1.setVisible(false);
    }//GEN-LAST:event_jButton1MouseExited

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        

    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered
        // TODO add your handling code here:
        jLabel2.setVisible(true);
    }//GEN-LAST:event_jButton2MouseEntered

    private void jButton2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseExited
        // TODO add your handling code here:
        jLabel2.setVisible(false);
    }//GEN-LAST:event_jButton2MouseExited

    private void jButton2ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jButton2ComponentShown
        // TODO add your handling code here:
        try{
            Thread.sleep(10);
            jButton4.setVisible(true);
        }catch(Exception e) {

        }
    }//GEN-LAST:event_jButton2ComponentShown

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        hm.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseEntered
        // TODO add your handling code here:
        jLabel4.setVisible(true);
    }//GEN-LAST:event_jButton4MouseEntered

    private void jButton4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseExited
        // TODO add your handling code here:
        jLabel4.setVisible(false);
    }//GEN-LAST:event_jButton4MouseExited

    private void jButton4ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jButton4ComponentShown
        // TODO add your handling code here:
        try{
            Thread.sleep(10);
            jButton5.setVisible(true);
        }catch(Exception e) {

        }
    }//GEN-LAST:event_jButton4ComponentShown

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if(confirmAction("Do you really want to logout?")) {
            setVisible(false);
            new login().setVisible(true);
        }
        
       
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseEntered
        // TODO add your handling code here:
        jLabel5.setVisible(true);
    }//GEN-LAST:event_jButton5MouseEntered

    private void jButton5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseExited
        // TODO add your handling code here:
        jLabel5.setVisible(false);
    }//GEN-LAST:event_jButton5MouseExited

    private void jButton5ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jButton5ComponentShown
        // TODO add your handling code here:
        z = 1;
    }//GEN-LAST:event_jButton5ComponentShown

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
         //0 for exit
         if(confirmAction("Do you really want to close the program?")) {
                System.exit(0);
         }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jScrollPane1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jScrollPane1MouseWheelMoved
        // TODO add your handling code here:
        JScrollBar bar = jScrollPane1.getVerticalScrollBar();
    
        // getUnitsToScroll() is negative on wheel-up, positive on wheel-down
        int notches     = evt.getUnitsToScroll();
        int speedFactor = 15;    // tweak this: 1=default, 2=twice as fast, etc.
        int delta       = notches * bar.getUnitIncrement() * speedFactor;

        bar.setValue(bar.getValue() + delta);
        evt.consume();  // prevent the default slow scroll
    }//GEN-LAST:event_jScrollPane1MouseWheelMoved

    private void tem2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tem2MouseEntered
        // TODO add your handling code here:
        
        if(tem2 != null)
            SI.showPopup(tem2);
        SI.popup.setVisible(true);
   
        
    }//GEN-LAST:event_tem2MouseEntered

    private void tem2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tem2MouseExited
        // TODO add your handling code here:
        if(SI.popup != null) {
            SI.popup.setVisible(false);
        }
    }//GEN-LAST:event_tem2MouseExited
    private List<LedgerSummary> summarizeTAccounts(Map<String, Map<String, List<LedgerTxn>>> tAccounts) {
        List<LedgerSummary> summaries = new ArrayList<>();
        for (Map.Entry<String, Map<String, List<LedgerTxn>>> e : tAccounts.entrySet()) {
            String accountName = e.getKey();
            Map<String, List<LedgerTxn>> sides = e.getValue();

            List<LedgerTxn> debits = sides.getOrDefault("debit", List.of());
            List<LedgerTxn> credits = sides.getOrDefault("credit", List.of());

            BigDecimal totD = debits.stream()
                                    .map(LedgerTxn::getAmount)
                                    .reduce(BigDecimal.ZERO, BigDecimal::add);
            BigDecimal totC = credits.stream()
                                     .map(LedgerTxn::getAmount)
                                     .reduce(BigDecimal.ZERO, BigDecimal::add);

            if (totD.compareTo(BigDecimal.ZERO) == 0 && totC.compareTo(BigDecimal.ZERO) == 0) {
                continue;
            }

            BigDecimal rem = totD.subtract(totC).abs();
            boolean isDebit = totD.compareTo(totC) >= 0;

            summaries.add(new LedgerSummary(accountName,
                    isDebit ? rem : BigDecimal.ZERO,
                    isDebit ? BigDecimal.ZERO : rem));
        }
        return summaries;
    }

    public void recomputeAndSaveLedgers(int projectId) {
        Map<String, Map<String, List<LedgerTxn>>> tUn = buildTAccountsJournalOnly(projectId);
        List<LedgerSummary> unadjustedSummaries = summarizeTAccounts(tUn);
        saveLedgerSummariesUTB(projectId, unadjustedSummaries);

        boolean adjUsed = checkAdjustmentUsed(projectId);
        if (adjUsed) {
            Map<String, Map<String, List<LedgerTxn>>> tCombined = buildCombinedTAccounts(projectId);
            List<LedgerSummary> adjustedSummaries = summarizeTAccounts(tCombined);
            saveAdjustedLedgerSummaries(projectId, adjustedSummaries);
        }
    }

    public void recomputeAndSaveSingleAccount(int projectId, String accountName) {
        // Unadjusted (JE only)
        Map<String, Map<String, List<LedgerTxn>>> tUn = buildTAccountsJournalOnly(projectId);
        Map<String, Map<String, List<LedgerTxn>>> entry = new HashMap<>();
        if (tUn.containsKey(accountName)) entry.put(accountName, tUn.get(accountName));
        List<LedgerSummary> unadjustedSummaries = summarizeTAccounts(entry);

        saveLedgerSummariesUTB(projectId, unadjustedSummaries);

        if (checkAdjustmentUsed(projectId)) {
            Map<String, Map<String, List<LedgerTxn>>> tComb = buildCombinedTAccounts(projectId);
            Map<String, Map<String, List<LedgerTxn>>> entryComb = new HashMap<>();
            if (tComb.containsKey(accountName)) entryComb.put(accountName, tComb.get(accountName));
            List<LedgerSummary> adjustedSummaries = summarizeTAccounts(entryComb);
            saveAdjustedLedgerSummaries(projectId, adjustedSummaries);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ledger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ledger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ledger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ledger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ledger(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel tem2;
    // End of variables declaration//GEN-END:variables
}
